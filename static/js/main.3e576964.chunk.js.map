{"version":3,"sources":["Form.js","cityResult.js","Fetcher.js","App.js","serviceWorker.js","index.js"],"names":["Form","props","react_default","a","createElement","id","onClick","search","CityInfo","Zip","Fetcher","state","cities","console","log","input","document","getElementById","value","res","toUpperCase","fetch","then","response","json","data","_this","setState","results","this","map","city","cityResult","src_Form","Component","App","src_Fetcher","Boolean","window","location","hostname","match","ReactDOM","render","src_App","navigator","serviceWorker","ready","registration","unregister"],"mappings":"oPAceA,EAZJ,SAACC,GACR,OACIC,EAAAC,EAAAC,cAAA,WAEQF,EAAAC,EAAAC,cAAA,6BACAF,EAAAC,EAAAC,cAAA,SAAOC,GAAK,WACZH,EAAAC,EAAAC,cAAA,UAAQC,GAAK,KAAKC,QAAWL,EAAMM,QAAnC,aCKDC,EAXA,SAACP,GAEZ,OACIC,EAAAC,EAAAC,cAAA,WAEKH,EAAMQ,MC+CJC,6MA/CXC,MAAQ,CACJC,OAAS,MAGbL,OAAS,WAELM,QAAQC,IAAI,SACZ,IAAIC,EAAQC,SAASC,eAAe,UAAUC,MAC9CL,QAAQC,WAAWC,GACnB,IAAII,EAAMJ,EAAMK,cAIhBC,MAAM,yCAA2CF,GAChDG,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SACtBF,KAAK,SAAAG,GACFZ,QAAQC,IAAIW,GACZZ,QAAQC,IAAI,SAEZY,EAAKC,SAAS,CACVf,OAASa,+EAUrB,IACIG,EAAUC,KAAKlB,MAAMC,OAAOkB,IAAI,SAAAC,GAAI,OAAI7B,EAAAC,EAAAC,cAAC4B,EAAD,CAAYvB,IAAOsB,MAI/D,OACI7B,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,yBACAF,EAAAC,EAAAC,cAAC6B,EAAD,CAAM1B,OAAUsB,KAAKtB,SACpBqB,UAzCKM,aCaPC,EAVL,WACR,OACEjC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACgC,EAAD,QCCcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOzC,EAAAC,EAAAC,cAACwC,EAAD,MAAS5B,SAASC,eAAe,SD2H3C,kBAAmB4B,WACrBA,UAAUC,cAAcC,MAAMzB,KAAK,SAAA0B,GACjCA,EAAaC","file":"static/js/main.3e576964.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nlet Form = (props) =>{\r\n    return(\r\n        <div>\r\n            \r\n                <label>City Search:</label>\r\n                <input id = \"search\" />\r\n                <button id = \"in\" onClick = {props.search}> submit</button>\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Form","import React from 'react';\r\n\r\nlet CityInfo = (props) =>{\r\n\r\n    return(\r\n        <div>\r\n\r\n            {props.Zip}\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default CityInfo;","import React, {Component} from 'react'\r\nimport Form from './Form'\r\nimport CityResult from './cityResult'\r\n\r\n\r\nclass Fetcher extends Component{\r\n\r\n    state = {\r\n        cities : []\r\n    }\r\n\r\n    search = () =>{\r\n\r\n        console.log(\"hello\")\r\n        let input = document.getElementById(\"search\").value;\r\n        console.log(typeof input)\r\n        let res = input.toUpperCase();\r\n        //input = input.toUpperCase();\r\n        \r\n        //change to caps\r\n        fetch(\"http://ctp-zip-api.herokuapp.com/city/\" + res)\r\n        .then(response => response.json())\r\n            .then(data =>{\r\n                console.log(data)\r\n                console.log(\"hello\")\r\n               \r\n                this.setState({\r\n                    cities : data\r\n                    \r\n\r\n                })\r\n                \r\n            })\r\n    }\r\n\r\n    render(){\r\n        //const results = this\r\n        let index = 0;\r\n        let results = this.state.cities.map(city => <CityResult Zip = {city}/>)\r\n\r\n      \r\n\r\n        return(\r\n            <div>\r\n                <h1>city search</h1>\r\n                <Form search = {this.search}/>\r\n                {results}\r\n\r\n            </div>\r\n        )\r\n    }\r\n    \r\n\r\n}\r\nexport default Fetcher;","import React from 'react';\nimport axios from 'axios';\n//import logo from './logo.svg';\n//import './App.css';\n//import CityResult from './cityResult.js';\nimport Info from './Fetcher'\n\n\nlet App = () =>{\n  return(\n    <div>\n      <Info/>\n    </div>\n  )\n}\n\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}